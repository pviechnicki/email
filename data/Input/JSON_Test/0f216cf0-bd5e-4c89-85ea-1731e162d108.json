{"birthId":"0f216cf0-bd5e-4c89-85ea-1731e162d108","metadata":{"attachments":[],"headers":[],"message":{"messageId":"1ONTXCF6T2U4.E6IJM6KC53R21@mimefactory.state.tld","subject":"as between Drosophila and Anopheles . Editing the","priority":"Normal","contentType":"multipart/alternative","sentDate":"2017-11-06T23:58:04","importance":"Normal","plainTextBody":"\r\n  \r\n    \r\n      \r\n        Rationale\r\n        Unadorned genomic sequence data is simply a string of\r\n        As, Ts, Gs, and Cs, with perhaps an associated confidence\r\n        value for each base. In this raw state, sequence data\r\n        provides very little biological insight. To utilize any\r\n        sequence it must be interpreted in the context of other\r\n        biological knowledge. This is the process of annotation,\r\n        the task of adding explanatory notations to the sequence\r\n        text. We define an annotation as the biological evaluation\r\n        and explanation of a specific region on a nucleic acid\r\n        sequence that includes, but is not limited to, gene\r\n        transcripts. Any feature that can be anchored to the\r\n        sequence - for example, an exon, a promoter, a transposable\r\n        element, a regulatory region, or a CpG island - is an\r\n        annotation. The genomic sequence will stabilize and reach a\r\n        finite endpoint, but the annotations will continue to\r\n        evolve indefinitely, as biological knowledge increases. To\r\n        understand the genetic legacy of an organism we must\r\n        interpret its genomic sequence, translating the information\r\n        it contains in molecular form into human-readable\r\n        annotations.\r\n        Part of this process is purely computational, and in its\r\n        simplest terms can be described as a process of\r\n        recognition: can anything be located that is somehow\r\n        already familiar? The first obvious tactic is to collect\r\n        sequences that may represent interesting biological\r\n        features and to search the genomic sequence in order to\r\n        discover the presence or absence of similar sequences. The\r\n        principle is the same whether the sequences used in this\r\n        comparison are expressed sequence tags (ESTs), full-length\r\n        cDNAs, repeated elements or highly conserved sequences, and\r\n        whether the sequences come from the same species, a closely\r\n        related species or a distantly related species; it is only\r\n        the alignment algorithm that will vary appropriately, for\r\n        example, BLAST [ 1], Sim4 [ 2], or BLAT [ 3]. The second\r\n        general tactic is to utilize what is already known about\r\n        specific classes of sequence features to construct an\r\n        abstract model representing this combined knowledge and to\r\n        search the genomic sequence to identify locations that\r\n        match this model, for example, hidden Markov models (HMM) [\r\n        4, 5, 6] and stochastic context-free grammars (SCFG) [ 7,\r\n        8].\r\n        While these computational examinations reveal the\r\n        general character of the primary sequence the results are\r\n        still of limited use for further functional biological\r\n        research [ 9, 10, 11, 12]. For example, BLAST provides\r\n        alignment results composed of high-scoring pairs (HSPs)\r\n        indicating local regions of similarity, but in total these\r\n        typically do not provide the best global alignment over the\r\n        entire length of the peptide to the genomic sequence.\r\n        Similarly gene-prediction programs can generate quite\r\n        different results depending on the length of the genomic\r\n        sequence analyzed and the gene density of the surrounding\r\n        sequence. Even systems that strive to make adjustments and\r\n        collate the results of all the analyses are unable to\r\n        consistently provide accurate biological models (see [ 13]\r\n        for a more detailed discussion). Our current computational\r\n        analysis capabilities are useful for primary annotation,\r\n        but the biological imprecision of the results, especially\r\n        within eukaryote genomes, makes expert evaluation\r\n        absolutely essential to ensure the correctness of the\r\n        annotations. In addition, this step is required to deepen\r\n        our understanding by connecting these annotations to all\r\n        the experimentally known biology of the organism.\r\n        Software developers are familiar with debugging tools\r\n        and techniques. Apollo is an analogous tool for debugging\r\n        genomic feature descriptions derived from automated\r\n        analyses and computational pipelines. It is also a tool to\r\n        facilitate connecting and comparing these annotations with\r\n        existing biological data. As an introspective tool, Apollo\r\n        makes it possible for researchers to closely examine and\r\n        compare explicit details and contrast them with their own\r\n        biological knowledge and apply any necessary corrections.\r\n        This evaluation is absolutely essential for progress in\r\n        genomics for three reasons.\r\n        First, we must improve our current algorithms and\r\n        recognition techniques for protein-coding genes. Several\r\n        groups have augmented standard approaches based solely on\r\n        protein-coding potential by exploiting exact alignments to\r\n        cDNA and EST data and similarities to sequences from the\r\n        same or different genomes (see, for example [ 14, 15]).\r\n        However, we are not yet at the stage where we can make\r\n        intelligent use of all the existing data automatically.\r\n        Resolving the conflicts that exist between EST evidence,\r\n        BLAST similarities and computational predictions can be\r\n        extremely complicated and is still best done by manual\r\n        inspection. The simplifications that existing automated\r\n        annotation pipelines must make lead to a number of\r\n        systematic errors, including under- or over-predicting\r\n        genes as well as merging the exons from two genes in one\r\n        gene model or splitting the exons from one gene into two\r\n        gene models. For example, if the software discounts\r\n        unspliced EST evidence (a common simplification made to\r\n        reduce the effect of errors in EST databases), small genes\r\n        can easily be omitted. In addition, issues such as\r\n        determining alternative transcripts, understanding promoter\r\n        usage, identifying polyadenylation sites, distinguishing\r\n        genes within the intron of another gene, and recognizing\r\n        dicistronic genes, are all outstanding problems in the\r\n        annotation of protein-coding genes. Yet, as more genomes\r\n        become available, we cannot hope to provide a high level of\r\n        manual examination and correction to describe the genes\r\n        present on these genomes precisely. It is essential that we\r\n        utilize the knowledge we are gaining from these initial\r\n        'well-annotated' genomes to improve the existing\r\n        computational methods, both by generating more\r\n        comprehensive training sets as well as by refining the\r\n        algorithms themselves.\r\n        Second, we must expand the available computational\r\n        repertoire to include methods for annotating other\r\n        biologically important features. Current computational\r\n        analyses are primarily only capable of describing simple\r\n        protein-coding gene models and these are therefore the sole\r\n        targets of most automated strategies. There are other\r\n        useful predictive programs for tRNA genes [ 16] and\r\n        promoters [ 17, 18, 19, 20], but a large number of\r\n        biological features still cannot be recognized by\r\n        computational methods alone. For example, there are no\r\n        fully automatic computational methods to detect\r\n        biologically important annotations such as pseudogenes and\r\n        non-coding RNA genes. Until a day arrives when we know all\r\n        the feature types that we are searching for, and precisely\r\n        how to find them in the genomic sequence, we will need to\r\n        rely upon expert inspection to augment automated\r\n        analyses.\r\n        Third, we must deliver the annotations to the community\r\n        as quickly and as accurately as possible because the\r\n        annotations themselves are an important resource.\r\n        Researchers depend on the availability of complete peptide\r\n        sets, gene structures and other data. Moreover, to be truly\r\n        useful these data must be correct. Many people have noted\r\n        and remarked upon the current fallibility of first-pass\r\n        protein-coding gene predictions and other annotations (see,\r\n        for example [ 9, 10, 11, 12, 21, 22, 23]). The technology\r\n        is not yet available to provide highly reliable datasets.\r\n        This impedes research that relies on these data. If\r\n        researchers in the community were provided with a means of\r\n        viewing the supporting data for each annotation as well as\r\n        for making corrections to annotations, then the accurate\r\n        data they require would become available much sooner.\r\n      \r\n      \r\n        Origins of Apollo\r\n        In the year 2000, within the space of six months, both\r\n        the \r\n        Drosophila genome [ 24] and the draft\r\n        human genome [ 25] were published. Both the Berkeley\r\n        Drosophila Genome Project (BDGP) working with Celera\r\n        Genomics and other researchers, and the Ensembl [ 26]\r\n        project working on the human genome provided the community\r\n        with annotations in a very short time. However, to those\r\n        who were working closely with the data it was obvious that\r\n        in the longer term this initial analysis would have to be\r\n        refined, improved and extended by manual curators. The\r\n        genomics community required tools that would provide more\r\n        than simply a view of these data, but that would enable\r\n        professional curators, and ultimately every researcher, to\r\n        easily modify and correct the annotations on an ongoing\r\n        basis through direct interaction. Both FlyBase-BDGP [ 27]\r\n        and Ensembl shared this understanding, and in the summer of\r\n        2000 entered into a collaborative agreement to achieve this\r\n        aim.\r\n        Apollo has roots reaching back more than a decade, and\r\n        builds on previous generations of software and domain\r\n        knowledge. In the early 1990s the \r\n        C. elegans project was underway at\r\n        the Sanger Institute and the \r\n        Drosophila genome project was\r\n        beginning at Berkeley. Both projects share the same\r\n        informatics root because both began by using ACeDB\r\n        (documentation, code and data available by anonymous FTP\r\n        from [ 28, 29, 30]). Berkeley developed a variant called\r\n        FlyDB [ 31] and was actively involved in porting AceDB to\r\n        the Macintosh computer platform. The Sanger Institute\r\n        coordinated the overall development of ACeDB and has relied\r\n        upon ACeDB for the ongoing annotation of \r\n        C. elegans and human genome\r\n        sequence.\r\n        In the mid-1990s, first Perl [ 32] and then Java [ 33]\r\n        were becoming widespread as programming languages for\r\n        developing bioinformatics tools. Our groups explored the\r\n        use of both languages. Berkeley created bioTkPerl [ 34, 35]\r\n        and became one of the early participants in BioPerI [ 36].\r\n        BioTkPerl was used in a number of applications, but most\r\n        notably in this context it was the underpinning for the\r\n        annotation tool Genotator [ 37]. Genotator has been widely\r\n        distributed and in turn formed the basis for other\r\n        Perl-based genomic tools such as Genquire [ 38].\r\n        Initially we had hopes that Java would enable us to\r\n        distribute both the data and the application software\r\n        dynamically over the internet, and thus solve the problem\r\n        of providing a far-flung community with both the freshest\r\n        data and the latest application releases simultaneously. In\r\n        practice, both the Berkeley and Ensembl groups use Perl for\r\n        internet-based data access [ 39] and Java for locally\r\n        resident applications. Our first Java applications were\r\n        Artemis at the Sanger Institute [ 40] and CloneCurator at\r\n        Berkeley. Artemis is widely used for annotating microbial\r\n        and other smaller genomes. CloneCurator was used to\r\n        annotate the 2.9 million base (Mb) \r\n        Adh region of \r\n        Drosophila [ 41] and provided the\r\n        baseline that was used to evaluate the results of the\r\n        Genome Annotation Assessment Project [ 9] trial. Although\r\n        both provided useful tools for the tasks they were\r\n        originally developed for, we needed a more sophisticated,\r\n        and easier to use, annotation editor for a large, complex\r\n        eukaryotic genome. There have been two commercial products\r\n        that originated with CloneCurator and built upon its\r\n        intellectual legacy, AnnotationStation (Neomorphic Software\r\n        for TIGR) and Genome-Browser (Celera), but neither was\r\n        freely available. Apollo is the most recent undertaking and\r\n        builds upon all of this accumulated experience.\r\n        Several general concepts were learned over this period\r\n        as we gained experience in working with genomic sequence\r\n        data. One was the importance of distinguishing the\r\n        presentation of the information from the underlying\r\n        biological data model. Searls [ 42] stated this concept\r\n        most clearly as the need to \"drive semantics out\" of the\r\n        graphical presentation. The second key concept was an\r\n        appreciation of well-understood and standard issues in data\r\n        management and portability. We needed a graphical\r\n        annotation tool that could be used easily at multiple sites\r\n        with different data-management environments. Taken\r\n        together, these issues led to the development of\r\n        Apollo.\r\n      \r\n      \r\n        Overview of Apollo from the curatorial\r\n        perspective\r\n        \r\n          Viewing the data\r\n          The curator can load data by specifying a region on a\r\n          selected chromosome. Depending on the source of the data\r\n          this region may be determined by absolute sequence\r\n          position, a file name, or, for \r\n          Drosophila , gene name, cytological\r\n          region (map position), scaffold accession or sequence\r\n          (which will be mapped to a genomic location by BLAST\r\n          similarity). After data from the desired region have been\r\n          loaded, a navigation bar allows the user to easily access\r\n          other regions of the genome - for example, the region\r\n          immediately upstream or downstream of the currently\r\n          displayed sequence. Apollo can transparently access data\r\n          across the network from remote machines, as well as\r\n          reading files that reside locally.\r\n          The main Apollo screen shows genomic features layered\r\n          on a segment of DNA, where each genomic feature appears\r\n          as a colored shape (typically rectangles, as shown in\r\n          Figure 1). Features are grouped, meaning that the\r\n          separate local alignments of subsequences derived from\r\n          the same source sequence (HSPs) are treated as a single\r\n          composite feature, and likewise the distinct exons from a\r\n          prediction are grouped together into a single feature\r\n          (composite features are typically drawn as lines\r\n          connecting the rectangles representing member features).\r\n          By default, the display shows features on both the\r\n          forward and reverse strands, with the forward strand on\r\n          top and the reverse strand on the bottom, separated by a\r\n          coordinate bar. For each strand, the inner (light blue)\r\n          panel contains annotations, showing exons and introns for\r\n          each transcript of a protein-coding gene. The outer\r\n          (gray) panel displays computational evidence to support\r\n          these annotations, such as gene predictions generated by\r\n          programs such as GenScan [ 44] and Genie [ 45], and other\r\n          biological data, such as ESTs aligned using the program\r\n          Sim4 [ 2] and protein homologies revealed by BLASTX [\r\n          1].\r\n          The features representing the supporting evidence in\r\n          the outer panel are organized into tiers and types. A\r\n          tier is a horizontal row of supporting evidence placed at\r\n          a specified position on the vertical axis that can be\r\n          labeled and controlled as a single collection. A tier\r\n          might be organized, for example, to contain all gene\r\n          prediction results from various programs, or all BLASTX\r\n          results from comparisons to several different species\r\n          databases. In addition to the tier, each feature is\r\n          associated with a particular data 'type'. A feature type\r\n          is typically an association of that feature to the\r\n          results produced by a particular analysis, for example,\r\n          all features derived from a TBLASTX run against all mouse\r\n          ESTs in dbEST might be given the type 'Mouse'. Each data\r\n          type can be individually assigned a shape and a color\r\n          (Figure 2). Users can control the maximum number of rows\r\n          shown in a tier and set a score threshold so that only\r\n          results above that threshold are visible. Operations on\r\n          individual tiers include setting a vertical coordinate\r\n          position or setting whether the tier is visible or\r\n          hidden. The user can view the data within a tier in a\r\n          collapsed style, in which all features within a tier are\r\n          collapsed into one line (Figure 3), or in an expanded\r\n          style, in which each individual feature is positioned to\r\n          avoid overlapping any other feature. These two organizing\r\n          principles of layout and category simplify viewing the\r\n          massive amounts of data.\r\n          A feature can be selected by clicking on it, at which\r\n          point detailed information such as name, sequence range\r\n          and score appear in the text panel at the bottom of the\r\n          screen (Figure 4). 'Rubber-banding' regions allows one to\r\n          select multiple entries and view abbreviated information\r\n          about each in the text display table, which can be sorted\r\n          by any field (for example, name or score).\r\n          Further information about an annotation that is\r\n          locally maintained can be displayed by bringing up the\r\n          text window, which contains descriptive information about\r\n          an annotation (Figure 5). Many features originate from\r\n          other databases (for example, SWISS-PROT [ 46], EMBL [\r\n          47] and GenBank [ 48]), and we can obtain extra\r\n          information by looking up those features in their parent\r\n          databases. Apollo allows the user to access this\r\n          information using a context-dependent menu. By\r\n          right-clicking a feature, the relevant report is\r\n          retrieved and shown in an internet browser.\r\n          Apollo allows the view to be scaled using zoom buttons\r\n          that magnify by 10?, 2?, 0.5?, and 0.1?. The\r\n          magnification can also be targeted to fit a selected\r\n          feature. Apollo provides 'semantic zooming': some\r\n          features that would clutter the display at low zoom\r\n          levels appear only when the user zooms in. At a\r\n          sufficiently high zoom level, start and stop codons and\r\n          the underlying genome sequence appear. Likewise, the\r\n          sequence level information is displayed for each evidence\r\n          type and annotation, either as nucleotides or amino-acid\r\n          residues (Figure 6).\r\n          A view is also available that displays the translation\r\n          of each of the three frames of the genomic sequence. In\r\n          this, start and stop codon positions are colored green\r\n          and red respectively. Also when a transcript is selected,\r\n          the specified coding frame of each of its exons is\r\n          highlighted.\r\n          In addition to the horizontal scroll bar, curators can\r\n          move to a specific position by specifying a coordinate,\r\n          gene name, or short sequence string (Figure 7). Users can\r\n          also bookmark genes of interest to find them easily\r\n          again. The sequence of any feature or set of features can\r\n          be saved in FASTA format, either as the raw DNA sequence\r\n          or as a virtual cDNA, coding sequence or translated\r\n          amino-acid sequence. Apollo also provides a restriction\r\n          enzyme finder, which allows the user to find known\r\n          restriction enzyme sites within a sequence, and a GC base\r\n          frequency analyzer, which displays a plot of GC content\r\n          from an adjustable sliding window over a sequence.\r\n          The most recent addition to Apollo is the synteny\r\n          viewer and editor (Figures 8, 9), which displays features\r\n          on two different genomes at the same time. The need for\r\n          this additional tool was precipitated by the recent\r\n          release of the mouse genome. The synteny display is being\r\n          used to improve annotations by closely examining the\r\n          mouse-to-human comparisons. We are currently working to\r\n          add editing capabilities to this view and to present\r\n          other genome comparisons, such as between \r\n          Drosophila and \r\n          Anopheles .\r\n        \r\n        \r\n          Editing the data\r\n          Apollo's editing functionality allows curators to\r\n          manually create and modify gene annotations. Annotation\r\n          in Apollo is supported by the ability to detect and\r\n          display edge matches, start and stop codons and potential\r\n          splice sites. New gene models can be created easily by\r\n          dragging a feature from the evidence panel into the\r\n          annotation zone. When a new gene model is created, Apollo\r\n          automatically creates an annotation using the longest\r\n          possible open reading frame (ORF) for the transcript.\r\n          Curator comments can then be attached to the gene\r\n          annotation or to an individual transcript annotation.\r\n          Modifications are time-stamped and associated with the\r\n          curator's name, providing a complete history of the\r\n          annotation.\r\n          As alternatively spliced transcripts are added to a\r\n          gene model, they are sequentially named and numbered to\r\n          associate them with that annotation. Apollo automatically\r\n          creates alternatively spliced transcripts for a gene\r\n          whenever the ORFs of transcripts overlap. In \r\n          Drosophila overlapping untranslated\r\n          regions (UTRs) are observed frequently between adjacent\r\n          transcripts, but this does not necessarily indicate that\r\n          the transcripts are for the same gene, so Apollo offers\r\n          the option to make these new transcripts into distinct\r\n          overlapping genes. Curators may add exons to existing\r\n          transcripts by dragging the selected evidence down until\r\n          the features are positioned directly over an existing\r\n          transcript. Curators may set a splice site by selecting\r\n          an exon and one evidence feature and choosing either the\r\n          'Set as 5' end' or 'Set as 3' end' option from the\r\n          annotation pop-up menu.\r\n          Sequence-level adjustments are possible with Apollo's\r\n          exon editor. This allows the curator to modify\r\n          intron-exon boundaries base by base, split and merge\r\n          genes, and export genomic or translated sequence. The\r\n          exon editor (Figure 10) allows one to view the genomic\r\n          sequence of a single strand and its three-frame\r\n          conceptual translation, with start and stop codons\r\n          highlighted.\r\n        \r\n      \r\n      \r\n        Overview of Apollo from the developer's\r\n        perspective\r\n        \r\n          Installation and configuration\r\n          Apollo runs under the Windows, Mac OS X, Linux and\r\n          Solaris operating systems and requires Java 1.2 or 1.3.\r\n          In our memory tests with a 300 kilobase (kb) sequence\r\n          with several thousand features, the memory heap size\r\n          hovered around 100 Mbytes (MB). Therefore Apollo will run\r\n          on a machine with 128 MB of available memory, but it will\r\n          do better with 256 MB.\r\n          Apollo is highly configurable in terms of appearance,\r\n          connectivity and extensions. Users can specify the color,\r\n          graphical representation and placement of any feature\r\n          (both annotations and computational results). The\r\n          configuration file describes both the tiers and the types\r\n          of data that are to be displayed. The file describes each\r\n          tier by a label (for example 'Prediction'), a visible\r\n          flag (either true or false), and a layout flag (if true\r\n          then all data in this tier is arranged to avoid overlap,\r\n          that is, the tier is expanded). The file also describes\r\n          for each feature type: the tier it is to appear in; a\r\n          label for that feature type; a color; the list of\r\n          attributes to appear in the tabular report; initial score\r\n          thresholds; and the drawable class to be used to display\r\n          this feature. URLs for connecting features to outside\r\n          data sources are also configurable. Note that the\r\n          separation of tiers and types allows multiple feature\r\n          types to be displayed in the same tier. For example the\r\n          results of all gene-prediction programs can be shown in a\r\n          single 'Prediction' tier. The aim is provide as much\r\n          flexibility as possible in the presentation of the data.\r\n          The information included in this file is incorporated\r\n          when Apollo data are loaded.\r\n          The user can change some of the 'style' attributes of\r\n          a feature type - for example, its color and tier position\r\n          - interactively. A 'types' panel pops up as a separate\r\n          window and shows all the tier names and colors.\r\n          Right-clicking on a type lets the user adjust the color\r\n          used for displaying features of that type; middle\r\n          clicking allows the score threshold to be adjusted\r\n          (features with scores below the threshold are not shown\r\n          in the display). The user can adjust the order of tiers\r\n          by selecting and dragging tiers with the mouse and the\r\n          control key. The new tier options can then be saved to a\r\n          tiers file, allowing each user to store personal style\r\n          preferences.\r\n        \r\n        \r\n          External data adaptors: connecting Apollo to a\r\n          database\r\n          Apollo is populated with data via a set of adaptors.\r\n          Typically (for data coming from an external data source)\r\n          these consist of two Java classes: a dialog box and the\r\n          adaptor itself. The dialog box allows the user to tell\r\n          the system what sequence they wish to examine. The\r\n          adaptor provides a method for translating between the\r\n          structure of the external data and the internal Apollo\r\n          data models.\r\n          The existing adaptors allow data to be loaded from the\r\n          Ensembl CGI server, GAME XML files, direct connections to\r\n          either the Ensembl or Gadfly databases, DAS servers [\r\n          49], and the Ensembl variant of GFF. Once edited the data\r\n          may be stored as GAME XML files, GFF files, or GenBank\r\n          table format [ 50]. We recognize a need for additional\r\n          adaptors to read other variants of GFF (particularly that\r\n          generated by Artemis), and GenBank and EMBL flat-file\r\n          entries.\r\n          The class Apollo.gui.DataLoader manages the fetching\r\n          and recording of annotation session data, which are held\r\n          in the CurationSet data model. This class is instantiated\r\n          whenever a new request is received for an additional\r\n          feature or sequence data from an external source. The\r\n          DataLoader class is quite straightforward; it provides\r\n          two publicly available methods for loading and saving the\r\n          data utilized during an annotation session. If a specific\r\n          data adaptor is not provided among the arguments in the\r\n          initial request, then the DataLoader will bring up a\r\n          dialog box (org.bdgp.swing.widget.DataAdapterChooser) to\r\n          allow the user to select an adaptor for an external data\r\n          source (or sink). When the DataLoader instantiates a\r\n          DataAdapterChooser it provides it with an\r\n          org.bdgp.io.DataAdapterRegistry. This DataAdapterRegistry\r\n          is populated with the list of all available adaptors from\r\n          the configuration file and is initialized during Apollo's\r\n          startup. These adaptors are one of the two pieces of\r\n          software that must be provided to add a new external\r\n          adaptor.\r\n          A data adaptor extends the\r\n          org.bdgp.io-AbstractDataAdapter class and implements the\r\n          following methods of the ApolloDataAdapterI\r\n          interface:\r\n          \r\n          GetUI: The DataAdapterChooser\r\n          requires an interface to interact with the user and\r\n          collect any necessary information. The DataAdapterChooser\r\n          obtains this interface via this DataAdapter method,\r\n          including as an argument the type of input/output\r\n          operation (for example, IOOperation.READ or\r\n          IOOperation.WRITE). This user interface is the other\r\n          class (in addition to the DataAdapter itself) that the\r\n          software developer must provide to add an external\r\n          adaptor.\r\n          \r\n          GetCurationSet: his returns a\r\n          CurationSet model (from which all annotations and\r\n          features can be accessed). A CurationSet is the hub for\r\n          all sequence and feature models contemplated in an\r\n          annotation session.\r\n          \r\n          CommitChanges: The argument passed to\r\n          this is a CurationSet. The purpose is to record the\r\n          curator's annotation in a persistent form, whether this\r\n          is a file or a database.\r\n          \r\n          GetStateInformation: Following a load\r\n          this method captures the current query parameters so that\r\n          they may be saved and then restored in subsequent\r\n          sessions.\r\n          \r\n          setStateInformation: This method\r\n          restores the parameters needed to access a CurationSet\r\n          that was under examination in an earlier session. It is\r\n          an alternate to explicitly setting load parameters using\r\n          a dialog.\r\n          There are other required methods as well, but those\r\n          described above provide the essential functionality for a\r\n          DataAdapter.\r\n          The explicit DataAdapterUI that must be written\r\n          provides an implementation of the\r\n          org.bdgp.swingAbstractIntDataAdapUI interface. It\r\n          provides the DataAdapter with any user information that\r\n          is entered into the dialog window. The key method is\r\n          doOperation, which performs the data transformation by\r\n          delegating it to its partner data adaptor. The input and\r\n          outputs to this method are entirely dependent on the\r\n          operation the data adaptor is supposed to perform.\r\n          In summary, the mechanics of adding a new external\r\n          data source are straightforward. This allows a developer\r\n          to focus solely on writing the software to handle the\r\n          semantic mapping between their own data representation\r\n          and the Apollo data models.\r\n        \r\n        \r\n          Adding new Drawables\r\n          Several graphical elements are already available for\r\n          representing features (Figure 2). Developers can\r\n          incorporate new Drawable classes by simply extending the\r\n          existing base classes and implementing relevant methods.\r\n          The following describes some of the methods that can be\r\n          overridden.\r\n          \r\n          DrawSelected, drawUnselected , or\r\n          simply \r\n          draw . These methods actually paint\r\n          the graphics for the primary representation of the\r\n          sequence.\r\n          \r\n          AddHighlights can be used to draw\r\n          graphical indications that a feature shares start or end\r\n          positions with other features on the sequence.\r\n          \r\n          AddDecorations is used to draw any\r\n          additional characteristics, for example the sites of\r\n          start and stop codons within the feature.\r\n          A single feature type in fact requires two Drawable\r\n          classes, one for a set of those features and another for\r\n          an individual feature. This is useful for drawing gene\r\n          structures because the draw method for the set can be\r\n          used to draw a single line to illustrate the introns,\r\n          whereas the draw method for the individual exons can be\r\n          used to draw the rectangles to illustrate the exons. Once\r\n          a developer has written the Drawable software it can be\r\n          added by including the name of the class in the\r\n          configuration file.\r\n        \r\n        \r\n          Adding new views\r\n          This is undoubtedly the most ambitious way of\r\n          extending Apollo. A developer must understand how events\r\n          are passed between windows because it is these events\r\n          that indicate some change has occurred in the state of\r\n          the shared underlying data models. While there are many\r\n          other steps that are involved in adding a new view, this\r\n          section will focus on crucial elements of event handling\r\n          inside Apollo.\r\n          Windows that are interested in receiving a particular\r\n          type of event must implement the appropriate listener\r\n          interface for that event. When the listening window is\r\n          instantiated it is provided with the central Controller\r\n          object and must add itself to the global list of\r\n          listeners held in the Controller object by calling the\r\n          Controller's addListener method with itself as the only\r\n          argument. When the Controller receives notification of a\r\n          particular event it notifies every listener on this\r\n          list.\r\n          Events themselves are provided to the central event\r\n          Controller. The Controller implements an individual\r\n          handler method for every type of event within Apollo.\r\n          These Controller handler methods notify all registered\r\n          Listeners that an Event of that type has occurred. Some\r\n          examples of the current list of events for broadcasting\r\n          changes involving feature and sequence selection,\r\n          movement to a different sequence position, changes to\r\n          feature content or appearance, window operations, and the\r\n          availability of new data are briefly described below.\r\n          \r\n          Feature selection: This is the most\r\n          basic of events and indicates that one or more of the\r\n          sequence features has been selected, usually by a mouse\r\n          click, but also from the text search dialog, menus and\r\n          scrolling lists.\r\n          \r\n          Base focus: This event is used to\r\n          center a display of the genomic sequence on a particular\r\n          base. This may be used to position a display on a\r\n          feature, or because a user has typed in a particular\r\n          position, or because a given sequence string occurs at\r\n          that position.\r\n          \r\n          Region change: This event indicates\r\n          that a completely new region of the genome is replacing\r\n          the current sequence.\r\n          \r\n          Annotation change: The\r\n          AnnotationEditor is the sole generator of these events.\r\n          To track changes to these important features and ensure\r\n          consistency this task is highly centralized. Thus, for\r\n          example, when editing from the synteny view, the\r\n          modification requests will be relayed to the\r\n          AnnotationEditor. While the user interacts with the\r\n          synteny display, the non-graphical AnnotationEditor class\r\n          directly manages the edits. The AnnotationEditor carries\r\n          out the additions, deletions and changes to start and end\r\n          positions for exons, transcripts, genes and any other\r\n          annotation features. The Controller then passes these\r\n          events on to the listeners so that the annotations can be\r\n          redrawn accordingly.\r\n          \r\n          Result change: This event is used\r\n          only under unusual circumstances. Features are\r\n          occasionally placed on the incorrect strand because of\r\n          problems the alignment software has in identifying the\r\n          correct strand (EST sequences that do not contain any\r\n          splice junctions are the common source of this problem).\r\n          In these cases we allow the curator to move the computed\r\n          feature from one strand to the other so that it may be\r\n          used during annotation.\r\n          \r\n          Appearance change: This event is used\r\n          to issue a request for a change in the appearance of a\r\n          feature, for example, if the chosen color is altered.\r\n        \r\n      \r\n      \r\n        Discussion\r\n        Apollo was first put into practical use as an editor in\r\n        November 2001 for the re-annotation of the complete \r\n        Drosophila genome. Ten full-time\r\n        curators located at two sites (FlyBase-BDGP and\r\n        FlyBase-Harvard) used Apollo over the course of seven\r\n        months to revise and correct the annotations for the\r\n        complete genome [ 51]. During the course of this exercise\r\n        many improvements and capabilities were made to the\r\n        software, culminating in a well-exercised code-base for\r\n        Apollo. The Ensembl group provides Apollo to the community\r\n        for browsing human and mouse annotations.\r\n        Other groups, both commercial and academic, are also\r\n        using Apollo. The bioinformatics group at Biogen has been\r\n        using Apollo to examine alignments, executed with BLAT,\r\n        between their internal data and the public human genomic\r\n        sequence (X. Zhijun, personal communication). Their group\r\n        wrote a custom data adaptor to load their data that uses\r\n        either chromosome and range, or a sequence, or a sequence\r\n        name to query their internal data source and then display\r\n        the specified region in Apollo. The data adaptor retrieves\r\n        the data from an internal web service. The \r\n        Fugu genomics group at the UK HGMP-RC\r\n        in Cambridge has been using Apollo to display scaffolds,\r\n        that is, draft sequences of the \r\n        Fugu genome (T. Vavouri, personal\r\n        communication). Annotation has been generated in GFF format\r\n        and loaded into Apollo. The \r\n        Fugu group is currently working on\r\n        modifying Apollo to enable the interactive manipulation and\r\n        validation of the ordered scaffolds.\r\n        The best annotation makes use of every available piece\r\n        of information. This has already been seen in the \r\n        Drosophila project's use of results\r\n        from external pipelines and of the internal sequence reads\r\n        (individual sequences from the cDNA that are unassembled)\r\n        available from the full-length cDNA sequencing project [\r\n        52]. As new data become available, Apollo must be able to\r\n        display them effectively. Today, this means we need to add\r\n        displays to Apollo that exploit comparative data. By\r\n        aligning the genomic regions of related species and looking\r\n        for conserved sequence regions we will gain insight into\r\n        both fine gene structure (by identifying microexons) and\r\n        into regulatory and other conserved regions.\r\n        Motivated both by our experience over the past several\r\n        months and by new data that are becoming available we are\r\n        actively working on the following new features. A splice\r\n        junction view and editor will provide a tabular view of\r\n        donor and acceptor splice pairs together with predicted\r\n        splice junctions from standard weight matrices [ 53]. It\r\n        will allow curators to fine-tune splice sites to generate\r\n        the most biologically likely peptide. Data adaptors for\r\n        GenBank and EMBL flat files should be particularly useful\r\n        for a broader audience of biologists. In addition, we will\r\n        allow existing entries from these public sequence archives\r\n        to be overlaid onto the genomic sequence that is being\r\n        annotated.\r\n        Finally, we have developed external analysis adaptors\r\n        which will be useful in two ways. First they will enable\r\n        the curator to dynamically reanalyze a specific sub-section\r\n        of the sequence. This is important because, despite best\r\n        efforts, the results of a gene prediction or an alignment\r\n        over a large genomic region are often not as accurate as\r\n        those produced when the sequence analysis is more targeted.\r\n        Second, on-demand analysis will allow the curator to\r\n        dynamically evaluate the peptides generated by\r\n        protein-coding genes. This peptide evaluation is essential\r\n        to the process of annotation if one wishes to produce a\r\n        high-quality peptide set. The annotated peptides must be\r\n        examined to verify their biological fidelity. This includes\r\n        both consideration of the motifs that are present on the\r\n        peptide and a comparison with known peptides. Downstream\r\n        processing currently carries out this validation of the\r\n        annotations in bulk, but this delays feedback and problems\r\n        with the peptides are only cycled back to the curators for\r\n        correction after some time has passed. Making corrections\r\n        will be much more effective once the results of the\r\n        evaluation are immediately available to the curator while\r\n        they are working with that gene.\r\n        There are many other features that could be added to\r\n        Apollo and we look forward to working with the open source\r\n        community in bioinformatics to develop Apollo further. The\r\n        Generic Model Organism Database project (GMOD) [ 54], whose\r\n        aim is to provide tools for managing organism databases,\r\n        has adopted Apollo as its annotation workbench. Software\r\n        developers who are interested in contributing to this\r\n        project and customizing Apollo for their own genome\r\n        annotation projects can find more details at [ 55] and can\r\n        obtain the source code from the Concurrent Versions System\r\n        (CVS) [ 56] repository maintained on the GMOD Sourceforge\r\n        site at [ 57]. Biologists who are interested in using\r\n        Apollo for genomic annotation will find the detailed user's\r\n        guide at [ 58] and the most recent release of Apollo for\r\n        local installation at [ 59].\r\n      \r\n    \r\n  \r\n"},"properties":[{"key":"SourceSystemId","values":["1ONTXCF6T2U4.E6IJM6KC53R21@mimefactory.state.tld"]},{"key":"Sender","values":["{\"Name\":null,\"Address\":\"svcErecMbxPusher2@state.udev\",\"RoutingType\":\"SMTP\",\"MailboxType\":\"Mailbox\",\"Id\":null}"]},{"key":"IngestedFromMailbox","values":["MessagePump@state.dev"]},{"key":"BirthId","values":["0f216cf0-bd5e-4c89-85ea-1731e162d108"]},{"key":"SizeInKb","values":["86.571"]},{"key":"Sensitivity","values":["Official"]},{"key":"IsTransitory","values":["False"]},{"key":"SensitivityAssigned","values":["ClientAssigned"]},{"key":"AttachmentCount","values":["0"]},{"key":"IsCapstone","values":["False"]},{"key":"IsRecord","values":["True"]},{"key":"Classification","values":[""]},{"key":"MetadataGenerated","values":["2017-11-09T02:19:15.4302711Z"]},{"key":"MetadataGeneratorVersion","values":["0.1.1108.2"]},{"key":"Source","values":["MessagePump@state.dev"]},{"key":"SourceType","values":["EmailExchange"]},{"key":"DispositionType","values":["Official"]},{"key":"DispositionDate","values":["2024-11-06T23:58:04Z"]}],"security":{"securityDescriptors":["RECORD","OFFICIAL","eRecords"],"signatures":[]},"users":[{"userRoles":["To"],"id":130,"originalSmtp":"eRecJmb25Recip1@state.udev","smtp":"eRecJmb25Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb25Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb25Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7194","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":136,"originalSmtp":"eRecJmb12Recip1@state.udev","smtp":"eRecJmb12Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb12Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb12Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7168","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":141,"originalSmtp":"eRecJmb32Recip1@state.udev","smtp":"eRecJmb32Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb32Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb32Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7208","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":143,"originalSmtp":"eRecJmb17Recip1@state.udev","smtp":"eRecJmb17Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb17Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb17Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7178","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":150,"originalSmtp":"eRecJmb2Recip1@state.udev","smtp":"eRecJmb2Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"isDomestic":true,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb2Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","departmentNumber":"Embassy London","samAccountName":"eRecJmb2Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7148","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":154,"originalSmtp":"eRecJmb10Recip1@state.udev","smtp":"eRecJmb10Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb10Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb10Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7164","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":161,"originalSmtp":"eRecJmb27Recip1@state.udev","smtp":"eRecJmb27Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb27Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb27Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7198","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":163,"originalSmtp":"eRecJmb22Recip1@state.udev","smtp":"eRecJmb22Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb22Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb22Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7188","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":165,"originalSmtp":"eRecJmb19Recip1@state.udev","smtp":"eRecJmb19Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb19Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb19Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7182","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":166,"originalSmtp":"eRecJmb14Recip1@state.udev","smtp":"eRecJmb14Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb14Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb14Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7172","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":167,"originalSmtp":"eRecJmb9Recip1@state.udev","smtp":"eRecJmb9Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb9Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb9Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7162","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":170,"originalSmtp":"eRecJmb39Recip1@state.udev","smtp":"eRecJmb39Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb39Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb39Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7222","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":172,"originalSmtp":"eRecJmb35Recip1@state.udev","smtp":"eRecJmb35Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb35Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb35Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7214","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":179,"originalSmtp":"eRecJmb24Recip1@state.udev","smtp":"eRecJmb24Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb24Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb24Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7192","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":186,"originalSmtp":"eRecJmb31Recip1@state.udev","smtp":"eRecJmb31Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb31Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb31Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7206","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":194,"originalSmtp":"eRecJmb16Recip1@state.udev","smtp":"eRecJmb16Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb16Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb16Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7176","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":195,"originalSmtp":"eRecJmb8Recip1@state.udev","smtp":"eRecJmb8Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb8Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb8Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7160","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["To"],"id":200,"originalSmtp":"eRecJmb30Recip1@state.udev","smtp":"eRecJmb30Recip1@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-08-21T02:58:23.91","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\eRecJmb30Recip1","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"eRecJmb30Recip1","sid":"S-1-5-21-3423698062-3918280449-702950220-7204","emailHost":"state.udev","topLevelDomain":"udev"},{"userRoles":["From"],"id":201,"originalSmtp":"svcErecMbxPusher2@state.udev","smtp":"svcErecMbxPusher2@state.udev","name":"","smtpValidFrom":"2016-11-29T23:03:01.2","smtpValidTo":"9999-12-31T23:59:59.99","isState":true,"isCapstone":false,"userValidFrom":"2017-03-24T10:55:31.45","userValidTo":"9999-12-31T23:59:59.99","fqdn":"appservices.state.udev\\svcErecMbxPusher2","orgUnit":"Enterprise Services,eRecords,eRecords Service Accounts","samAccountName":"svcErecMbxPusher2","sid":"S-1-5-21-3423698062-3918280449-702950220-7223","emailHost":"state.udev","topLevelDomain":"udev"}]},"errata":[{"type":"Warning","task":"ParseJournal","field":"JournalReport","value":"","reason":"No Journal Reports for Email"},{"type":"Information","task":"ParseMime","field":"SensitivityAssigned","value":"","reason":"No Sensitivity Assigned Header"}],"indexLocation":"email_official7yr_2017_m11"}